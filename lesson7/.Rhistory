pf=read.csv('pseudo_facebook.tsv',sep='\t')
names(pf)
library(ggplot2)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) +
geom_boxplot()
ggsave('boxplot1.png')
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) +
geom_boxplot() +
stat_summary(fun = mean, geom = 'point', shap = 4)
ggsave('boxplot2.png')
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun = median)
ggsave('lineplot3.png')
# Write code to create a new data frame,
# called 'pf.fc_by_age_gender', that contains
# information on each age AND gender group.
# The data frame should contain the following variables:
#    mean_friend_count,
#    median_friend_count,
#    n (the number of users in each age and gender grouping)
# Here is an example of the structure of your data frame. Your
# data values will be different. Note that if you are grouping by
# more than one variable, you will probably need to call the
# ungroup() function.
#   age gender mean_friend_count median_friend_count    n
# 1  13 female          247.2953                 150  207
# 2  13   male          184.2342                  61  265
# 3  14 female          329.1938                 245  834
# 4  14   male          157.1204                  88 1201
# ENTER YOUR CODE BELOW THIS LINE.
# ==============================================================
library(dplyr)
pf.fc_by_age_gender = pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
head(pf.fc_by_age_gender, 10)
# Create a line graph showing the
# median friend count over the ages
# for each gender. Be sure to use
# the data frame you just created,
# pf.fc_by_age_gender.
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
ggsave('lineplot4.png')
#install.packages('reshape2')
library(reshape2)
#install.packages("tidyr")
head(pf.fc_by_age_gender, 5)
library(tidyr)
spread(subset(pf.fc_by_age_gender,
select = c('gender', 'age', 'median_friend_count')),
gender, median_friend_count)
pf.fc_by_age_gender.wide = dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
head(pf.fc_by_age_gender.wide, 6)
library(dplyr)
pf.fc_by_age_gender.wide = subset(pf.fc_by_age_gender[c('age', 'gender', 'median_friend_count')], !is.na(gender)) %>%
spread(gender, median_friend_count) %>%
mutate(ratio= female / male)
head(pf.fc_by_age_gender.wide, 8)
# Plot the ratio of the female to male median
# friend counts using the data frame
# pf.fc_by_age_gender.wide.
# Think about what geom you should use.
# Add a horizontal line to the plot with
# a y intercept of 1, which will be the
# base line. Look up the documentation
# for geom_hline to do that. Use the parameter
# linetype in geom_hline to make the
# line dashed.
# The linetype parameter can take the values 0-6:
# 0 = blank, 1 = solid, 2 = dashed
# 3 = dotted, 4 = dotdash, 5 = longdash
# 6 = twodash
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# =================================================
library(ggplot2)
ggplot(aes(x = age, y = ratio), data = pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 2, color = 'red')
ggsave('ratio.png')
# Create a variable called year_joined
# in the pf data frame using the variable
# tenure and 2014 as the reference year.
# The variable year joined should contain the year
# that a user joined facebook.
# See the Instructor Notes for three hints if you get
# stuck. Scroll down slowly to see one hint at a time
# if you would like some guidance.
# This programming exercise WILL BE automatically graded.
pf$year_joined = 2014 - ceiling(pf$tenure / 365)
# Create a variable called year_joined
# in the pf data frame using the variable
# tenure and 2014 as the reference year.
# The variable year joined should contain the year
# that a user joined facebook.
# See the Instructor Notes for three hints if you get
# stuck. Scroll down slowly to see one hint at a time
# if you would like some guidance.
# This programming exercise WILL BE automatically graded.
pf$year_joined = 2014 - ceiling(pf$tenure / 365)
summary(pf$year_joined)
table(pf$year_joined)
# Create a new variable in the data frame
# called year_joined.bucket by using
# the cut function on the variable year_joined.
# You need to create the following buckets for the
# new variable, year_joined.bucket
#        (2004, 2009]
#        (2009, 2011]
#        (2011, 2012]
#        (2012, 2014]
# Note that a parenthesis means exclude the year and a
# bracket means include the year.
pf$year_joined.bucket = cut(pf$year_joined,
c(2004, 2009, 2011, 2012, 2014))
table(pf$year_joined.bucket)
table(pf$year_joined.bucket, useNA = 'ifany')
# Create a line graph of friend_count vs. age
# so that each year_joined.bucket is a line
# tracking the median user friend_count across
# age. This means you should have four different
# lines on your plot.
# You should subset the data to exclude the users
# whose year_joined.bucket is NA.
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
stat_summary(aes(color = year_joined.bucket),
fun = median,
geom = "line")
ggsave('year_joined.bucket1.png')
# Write code to do the following:
# (1) Add another geom_line to code below
# to plot the grand mean of the friend count vs age.
# (2) Exclude any users whose year_joined.bucket is NA.
# (3) Use a different line type for the grand mean.
# As a reminder, the parameter linetype can take the values 0-6:
# 0 = blank, 1 = solid, 2 = dashed
# 3 = dotted, 4 = dotdash, 5 = longdash
# 6 = twodash
# The code from the last programming exercise should
# be your starter code!
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line") +
stat_summary(fun = mean, geom = 'line', linetype = 2, color = 'blue')
ggsave('year_joined.bucket2.png')
summary(pf$tenure)
friending_rate = subset(pf, tenure > 0)
summary(friending_rate$friend_count / friending_rate$tenure)
# alternate code:
# with(subset(pf, tenure > 0), summary(friend_count / tenure))
# Create a line graph of mean of friendships_initiated per day (of tenure)
# vs. tenure colored by year_joined.bucket.
# You need to make use of the variables tenure,
# friendships_initiated, and year_joined.bucket.
# You also need to subset the data to only consider user with at least
# one day of tenure.
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line")
ggsave('year_joined.bucket3.png')
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line")
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line")
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line")
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
stat_summary(aes(color = year_joined.bucket),
fun = mean,
geom = "line")
# Instead of geom_line(), use geom_smooth() to add a smoother to the plot.
# You can use the defaults for geom_smooth() but do color the line
# by year_joined.bucket
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
yo = read.csv('yogurt.csv')
str(yo)
yo$id = factor(yo$id)
str(yo)
library(ggplot2)
ggplot(aes(x = price), data = yo) +
geom_histogram(binwidth = 10, fill = '#F79420')
ggsave('hist1.png')
summary(yo)
unique(yo$price)
length(unique(yo$price))
table(yo$price)
# Create a new variable called all.purchases,
# which gives the total counts of yogurt for
# each observation or household.
# One way to do this is using the transform
# function. You can look up the function transform
# and run the examples of code at the bottom of the
# documentation to figure out what it does.
# The transform function produces a data frame
# so if you use it then save the result to 'yo'!
# OR you can figure out another way to create the
# variable.
yo = transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
ggplot(aes(x = all.purchases), data = yo) +
geom_histogram(binwidth = 1, fill = '#099DD9')
ggsave('hist2.png')
# Create a scatterplot of price vs time.
# This will be an example of a time series plot.
# Resolve overplotting issues by using
# techniques you learned in Lesson 4.
# What are some things that you notice?
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/20)
ggsave('scatter1.png')
set.seed(6230)
sample.ids = sample(levels(yo$id), 16)
sample.ids
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
ggsave('seed1.png')
nci = read.table('nci.tsv')
#colnames(nci) = c(1:64)
View(nci)
nci = read.table('nci.tsv')
colnames(nci) = c(1:64)
nci = read.table('nci.tsv')
colnames(nci) = c(1:64)
library(reshape2)
nci.long.samp = melt(as.matrix(nci[1:200,]))
names(nci.long.samp) = c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
View(nci.long.samp)
View(nci.long.samp)
library(reshape2)
nci.long.samp = melt(as.matrix(nci[1:200,]))
names(nci.long.samp) = c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("green", "red"))(100))
View(nci.long.samp)
library(reshape2)
nci.long.samp = melt(as.matrix(nci[1:200,]))
names(nci.long.samp) = c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("green", "red"))(500))
library(reshape2)
nci.long.samp = melt(as.matrix(nci[1:200,]))
names(nci.long.samp) = c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("green", "red"))(100))
View(nci)
View(nci.long.samp)
View(nci)
