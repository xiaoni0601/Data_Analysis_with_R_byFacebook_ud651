geom_point(alpha = 1/20,
position = position_jitter(h = 0),
color = 'orange') +
stat_summary(fun.y = mean, geom = "line")+
stat_summary(fun.y = quantile, fun.args = list(probs = .1), geom = "line", color = "red", linetype = 2) +
stat_summary(fun.y = quantile, fun.args = list(probs = .5), geom = "line", color = "red", linetype = 2) +
stat_summary(fun.y = quantile, fun.args = list(probs = .9), geom = "line", color = "red", linetype = 2)
?cor.test
cor.test(age, friend_count)
with(  , cor.test(age, friend_count))
with(pf, cor.test(age, friend_count))
with(pf, cor.test(age, friend_count, method = 'person'))
with(pf, cor.test(age, friend_count, method = 'pearson'))
with(pf, cor.test(age, friend_count, method = 'pearson'))
with(subset(pf, pf$age <= 70), cor.test(age, friend_count)
with(subset(pf, pf$age <= 70), cor.test(age, friend_count))
with(subset(pf, age <= 70), cor.test(age, friend_count), method = 'spearman')
names(pf)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha=10)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha=100)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha=100000)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha=1/20)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_jitter(alpha=1/20)
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_jitter()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log10()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log2()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log10()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log10() +
scale_y_log10()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_y_log10()
# This programming assignment
# will not be graded, but when you
# submit your code, the assignment
# will be marked as correct. By submitting
# your code, we can add to the feedback
# messages and address common mistakes
# in the Instructor Notes.
# You can assess your work by watching
# the solution video.
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
scale_x_log10()
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(o, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
xlim(limits(c(0, quantile(pf$www_likes_received, 0.95))) +
ylim(o, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
with(pf, cor.test(www_likes_received, likes_received))
install.packages('alr3')
library(alr3)
# Create a scatterplot of temperature (Temp)
# vs. months (Month).
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
library(alr3)
data("Mitchell")
# Create a scatterplot of temperature (Temp)
# vs. months (Month).
# ENTER ALL OF YOUR CODE TO CREATE THE PLOT BELOW THIS LINE.
# ===========================================================
library(alr3)
data("Mitchell")
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
View(Mitchell)
with(Mitchell, cor.test(Month, Temp))
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point() +
xlim(0, x/12)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point() +
scale_x_continuous(breaks=seq(0, 204, 12))
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point() +
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
summary(Mitchell$Month)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
summary(Mitchell$Month)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()+
scale_x_continuous(breaks=seq(0, 203, 12))
summary(Mitchell$Month)
range(Mitchell$Month)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()+
scale_x_continuous(breaks=seq(0, 203, 12))
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age ) +
geom_line()
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age ) +
geom_line()
head(pf.fc_by_age, 10)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age ) +
geom_line()
head(pf.fc_by_age, 10)
pf.fc_by_age[17:19, ]
View(pf)
View(pf)
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
# Assume the reference date for calculating age is December 31, 2013.
# This programming assignment WILL BE automatically graded. For
# this exercise, you need only create the 'age_with_months' variable;
# no further processing of the data frame is necessary.
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$age_with_months = pf$age + pf$dob_month%%12
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
# Assume the reference date for calculating age is December 31, 2013.
# This programming assignment WILL BE automatically graded. For
# this exercise, you need only create the 'age_with_months' variable;
# no further processing of the data frame is necessary.
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$age_with_months = pf$age + (12 - pf$dob_month) / 12
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age ) +
geom_line()
head(pf.fc_by_age, 10)
pf.fc_by_age[17:19, ]
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
# Assume the reference date for calculating age is December 31, 2013.
# This programming assignment WILL BE automatically graded. For
# this exercise, you need only create the 'age_with_months' variable;
# no further processing of the data frame is necessary.
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$age_with_months = pf$age + (12 - pf$dob_month) / 12
View(pf.fc_by_age)
View(pf)
View(pf.fc_by_age)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
# For example, the first two rows of the resulting
# data frame would look something like...
# age_with_months  friend_count_mean	friend_count_median	n
#              13            275.0000                   275 2
#        13.25000            133.2000                   101 11
# See the Instructor Notes for two hints if you get stuck.
# This programming assignment will automatically be graded.
suppressMessages(library(dplyr))
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf.fc_by_age_months = pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
head(pf.fc_by_age_months)
age_with_months_groups <- group_by(pf, age_with_months)
pf.fc_by_age_months2 <- summarise(age_with_months_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age_months2 <- arrange(pf.fc_by_age_months2, age_with_months)
head(pf.fc_by_age_months2)
View(pf.fc_by_age_months)
# Create a new line plot showing friend_count_mean versus the new variable,
# age_with_months. Be sure to use the correct data frame (the one you created
# in the last exercise) AND subset the data to investigate users with ages less
# than 71.
# ENTER YOUR CODE BELOW THIS LINE.
# ===============================================================
ggplot(aes(x = age_with_months,
y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months <= 71)) +
geom_point()
# Create a new line plot showing friend_count_mean versus the new variable,
# age_with_months. Be sure to use the correct data frame (the one you created
# in the last exercise) AND subset the data to investigate users with ages less
# than 71.
# ENTER YOUR CODE BELOW THIS LINE.
# ===============================================================
ggplot(aes(x = age_with_months,
y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months <= 71)) +
geom_line()
p1 = ggplot(aes(x = age, y = friend_count_mean),
data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 = ggplot(aes(x = age_with_months,
y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months <= 71)) +
geom_line()
p3 = ggplot(aes(x = around(age / 5) * 5, y = friend_count),
data = subset(pf, age < 71)) +
stat_summary(fun.y = mean, geom = "line", color = "red", linetype = 2)
library(gridExtra)
grid.arrange(p2, p1, p3, ncol = 1)
p1 = ggplot(aes(x = age, y = friend_count_mean),
data = subset(pf.fc_by_age, age < 71)) +
geom_line()
p2 = ggplot(aes(x = age_with_months,
y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months <= 71)) +
geom_line()
p3 = ggplot(aes(x = round(age / 5) * 5, y = friend_count),
data = subset(pf, age < 71)) +
stat_summary(fun.y = mean, geom = "line", color = "red", linetype = 2)
library(gridExtra)
grid.arrange(p2, p1, p3, ncol = 1)
p1 = ggplot(aes(x = age, y = friend_count_mean),
data = subset(pf.fc_by_age, age < 71)) +
geom_line() +
geom_smooth()
p2 = ggplot(aes(x = age_with_months,
y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months <= 71)) +
geom_line() +
geom_smooth()
p3 = ggplot(aes(x = round(age / 5) * 5, y = friend_count),
data = subset(pf, age < 71)) +
stat_summary(fun.y = mean, geom = "line", color = "red", linetype = 2)
library(gridExtra)
grid.arrange(p2, p1, p3, ncol = 1)
#install.packages("dplyr")
#library(dplyr)
age_groups = group_by(pf, age)
pf.fc_by_age = summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age = arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
#install.packages("dplyr")
library(dplyr)
age_groups = group_by(pf, age)
pf.fc_by_age = summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age = arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
